create a base branch off of main. 
Find out the current DHGatewayOnboarding that’s pointing to

Don’t Forget
log showbuildSettings
save the entire build log for apple developers to do an xcarchive
 The default optimization level for the Release configuration is Fastest, Smallest [-Os]

XCFramework. No changes
create a branch for dh-gateway 
create a branch for its dh-ios
make an xcarchive
make the ipas
store it

XCFramework. With changes
strip debug symbols. 
Think if there’s anything else to change
create a branch for dh-gateway 
create a branch for its dh-ios
make an xcarchive
make the ipas
store it

Other things to consider
we’re pulling in test files for our XCFramework. 

References 

Reducing your app’s size

Before you start optimizing your app, you first need to measure its download and installation sizes. However, none of the binaries that you create for debugging or that you upload to the App Store from within Xcode are suitable for measuring your app’s size. For example, you can’t use any of the following binaries:
The APP file (the app bundle)
The XCARCHIVE bundle that you create when your archive your app
The IPA file that you upload to App Store Connect
Those binaries contain resources and files that aren’t part of the bundles that your users download from the App Store; for example, DSYM files for crash reporting.

Apps distributed for testing with TestFlight contain additional data that an App Store build doesn’t have, so the TestFlight build is larger. This additional data isn’t included in your app when you make it available in the App Store. However, when compared to the binary you uploaded, the final size of your app after it’s approved for the App Store may end up being slightly larger. This size increase can happen when the App Store performs additional processing on your app’s binaries, adding DRM to prevent app piracy and then re-compressing the binaries.

Automate the generation of the app size report
Instead of creating the app size report with Xcode, you may want to automate its generation in build scripts or continuous integration workflows. Run the following command to use xcodebuild to export your app for distribution and create an app thinning size report:
xcodebuild -exportArchive -archivePath iOSApp.xcarchive -exportPath Release/MyApp -exportOptionsPlist OptionsPlist.plist

:point_up_2:Best link :point_up_2:

https://www.runtastic.com/blog/en/frameworks-ios/

Reduce the size of your app by stripping Swift symbols
Why do I want Swift symbols stripped from my app?
In most cases the symbols are not required for Swift frameworks including the Swift standard library. Stripping out the symbols can make apps significantly smaller.
How much space does symbol stripping save?
The amount of space you will save depends on a few factors. To find the size difference, build a distribution version of your app with and without the symbols stripped, install each of them on a device, and compare the size. You can build a distribution version for a registered device, for manual distribution, or for TestFlight. Looking at the size of an archive build is not a reliable way to measure the size of an iOS, watchOS or tvOS app because the Swift standard libraries are only stripped as part of App Thinning.

What is an XCFramework?
An XCFramework is a distributable binary package created by Xcode that contains variants of a framework or library so that it can be used on multiple platforms (iOS, macOS, tvOS, and watchOS), including Simulator builds. An XCFramework can be either static or dynamic and can include headers.

To use a prebuilt XCFramework, link the target to the XCFramework. Xcode ensures that the target can build against the XCFramework’s headers, link against its binary, and embed it for distribution. If your app has multiple targets (such as app extensions) that use the same XCFramework, you should pick one target (usually your app’s target) to embed the XCFramework and the others should link it without embedding.

Create an XCFramework

Monitor the status of builds
EXCELLENT IMAGE

[object Object]